{"pages":[],"posts":[{"title":"github pages + hexo","text":"安装hexo1$ cnpm install hexo-cli -g 初始化博客1$ hexo init \"hexo-demo\" 新建post1$ hexo new post \"hexo-new-post\" 在hexo-demo/source/_posts下将会生成名为hexo-new-post.md的文件，可用markdown工具进行编辑。 绑定Githubgithub新建pages项目 在github中新建名为{username}.github.io的项目，其中，二级域名必须与github用户名相同，否则将导致访问404。 github中上传localhost的ssh公钥。 编辑hexo _config.yml文件1$ vi ./_config.yml 其中deploy部分修改为： 1234deploy: type: git repository: git@github.com:{username}/{username}.github.io.git branch: master 安装必要插件1$ cnpm install hexo-deployer-git --save 生成静态文件1$ hexo g 部署至Github1$ hexo d 至此，一般在三分钟左右，访问{username}.github.io，即可看到新生成的文章。","link":"/2019/09/13/github-pages-hexo/"},{"title":"SpringCloud 入门","text":"","link":"/2019/09/14/SpringCloud-入门/"},{"title":"ReactJS 入门","text":"1. 安装1$ cnpm install react react-cli 2. 初始化项目2.1 Create React App官方页面说create-react-app适用于学习react及创建简易项目： Create React App is a comfortable environment for learning React, and is the best way to start building a new single-page application in React. npx1$ npx create-react-app react-demo 运行时间相对vue.js初始化较长，完成后react-demo文件夹大小为202M。 npm1$ npm init react-app react-demo yarn1$ yarn create react-app react-demo 2.2 Next.js2.3 Gatsby3. 基本命令1234$ yarn start // 本地运行$ yarn build // 编译生成静态文件$ yarn test $ yarn eject // ? 关于yarn eject的说明： Removes this tool and copies build dependencies, configuration files and scripts into the app directory. 4. 架构(vs Vue.js) React Vue 架构 V (MVC) VM (MVVM) view JSX html + js ? 数据绑定 单向数据流 双向数据流 移动端原生应用 React Native - 5. Hello World例子 hello world极简例子的文件组成 12345.├── package.json├── src│ ├── App.js│ ├── index.js package.json 12345678910111213141516{ \"name\": \"react-demo\", \"version\": \"0.1.0\", \"private\": true, \"dependencies\": { \"react\": \"^16.9.0\", \"react-dom\": \"^16.9.0\", \"react-scripts\": \"3.1.1\" }, \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\" },} index.js 12345import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import App from &apos;./App&apos;;ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;)); App.js 1234567891011import React from &apos;react&apos;;function App() { return ( &lt;div className=&quot;App&quot;&gt; Hello world! &lt;/div&gt; );}export default App; 6. 路由机制例子 文件目录 123456.├── package.json├── src│ ├── App.js│ ├── World.js│ ├── index.js index.js 同Hello World例子 App.js 12345678910111213141516import React from &apos;react&apos;;import { BrowserRouter as Router, Route } from &apos;react-router-dom&apos;;import World from &apos;./World&apos;;function App() { return ( &lt;div className=&quot;App&quot;&gt; &lt;Router&gt; &lt;Route path=&quot;/hello&quot; component={ World }&gt;&lt;/Route&gt; &lt;/Router&gt; &lt;/div&gt; );}export default App; World.js 1234567891011import React from &apos;react&apos;;function World() { return ( &lt;div&gt; Hello world! &lt;/div&gt; );}export default World; . JSX语法糖. React + TypeScript. VSCode 插件 Reactjs code snippets React native … . tips 版本问题：react-router / react-router-dom","link":"/2019/09/15/ReactJS-入门/"},{"title":"SpringCloud 入门","text":"1. 基础1.1 SpringCloud Netflix 基础组件 Name Usage 1 Netflix Eureka 服务注册/发现 2 Netflix Feign + Hystrix 客服端负载均衡 + 断路器 3 Netflix Zuul Spring Cloud Config 2 SpringCloud demo2.1 组件构成Eureka + Feign + Hystric + Zuul + Config 2.2 搭建 公共依赖 pom.xml 12345678910111213141516&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Greenwich.SR3&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 2.2.1 eureka server 依赖 pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 1234567891011121314151617server: port: 8761 #服务端口spring: application: name: eurka-server #服务应用名称eureka: instance: hostname: localhost client: registerWithEureka: false #是否将自己注册到Eureka Server，默认为true fetchRegistry: false #是否从Eureka Server获取注册信息，默认为true service-url: defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #服务注册的 URL server: renewal-percent-threshold: 0.5 Application添加@EnableEurekaServer标注 eureka.renewalPercentThreshold=0.85导致错误：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. 解决方法：修改为0.5 或 开启多个eureka server 2.2.2 Feign + Hystrix 依赖 pom.xml 123456789101112&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 123456789101112131415server: port: 8765spring: application: name: service-feigneureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/feign: hystrix: enabled: true Application添加@@EnableEurekaClient、@EnableFeignClients 为对应的微服务接口建立interface，添加@FeignClient标注，添加fallback选项以配置Hystrix 2.2.3 Zuul 依赖 pom.xml 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 1234567891011121314151617server: port: 8769spring: application: name: service-zuuleureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/zuul: routes: api-feign: # 分发 path: /api/** service-id: service-feign Application添加@EnableEurekaClient、@EnableZuulProxy标注 2.2.4 Config","link":"/2019/09/17/SpringCloud-Alibaba-入门/"},{"title":"HTTP及TCP协议入门","text":"0. 网络基础 OSI七层模型 via 计算机网络漫谈 1. HTTP基础 消息结构 method 状态码 响应头 2. TCP2.1 TCP三次握手via hit-alibaba.github.io","link":"/2019/09/21/HTTP及TCP协议入门/"},{"title":"Java BIO / NIO / AIO 对比","text":"区别 BIO NIO AIO 全称 Blocking I/O New I/O Asynchronous I/O 模式 同步阻塞 同步非阻塞 异步非阻塞 支持版本 all JDK 1.4+ JDK 1.7+ Java BIO","link":"/2019/09/16/Java-NIO-Jetty-Netty-入门及对比/"},{"title":"Rancher 使用入门","text":"什么是 Rancher安装kubernetesjenkins#","link":"/2019/09/23/Rancher-使用入门/"},{"title":"JVM 入门","text":"当人们谈论 JVM 时人们在谈论什么 JVM 概念 字节码 1. 虚拟机内存结构 虚拟机内存结构 = 运行时数据区（Runtime Data Area） 1.1 公有部分 名称 存储内容 1 Java 堆 Java 实例对象 2 方法区 存储 Java 类字节码数据，含常量池 3 常量池 1.2 私有部分类加载垃圾回收内存结构基本命令","link":"/2019/09/22/JVM-入门/"},{"title":"node.js 及框架入门","text":"1. node.js无框架搭建http服务1.1 helloworld demoserver.js 1234567var http = require(\"http\");http.createServer(function(req, res) { console.log(req.url); res.writeHead(200, {\"Content-Type\": \"text/html\"}); res.write(\"&lt;html&gt;&lt;body&gt;&lt;p&gt;hello world&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\")}).listen(3000, function() {console.log(\"server running...\")}); 1.2 GET &amp;&amp; POSTserver.js 1234567891011121314151617181920212223242526var http = require(\"http\")var url = require(\"url\")var queryString = require(\"querystring\")http.createServer(function(req, res) { console.log(req.method); if (req.method === \"GET\") { var params = url.parse(req.url, true, true); console.log(params); res.end(JSON.stringify(params)); } else if (req.method === \"POST\") { var data_str = \"\"; req.on(\"data\", function(chunk) { data_str += chunk; }); req.on(\"end\", function () { console.log(data_str); // 见注释 res.end(data_str); }); }}).listen(3000, function() { console.log(\"server running...\")}); 该语句放在req.on(“end”, …)之上则打印为空，chunk类型为byte，非空，待分析。 默认POST数据为form-data。 2. express.js2.1 installation &amp;&amp; helloworld demo install 1$ cnpm install -g express express-generator helloworld demo server.js 12345678910var express = require(\"express\")var app = express();app.get(\"/\", function(req, res) { res.send(\"&lt;html&gt;&lt;body&gt;Hello world!&lt;/body&gt;&lt;/html&gt;\");});app.listen(3000, function() { console.log(\"server running...\");}); 2.2 express cli1234$ express express-demo$ cd express-demo$ npm install$ npm start 默认访问http://localhost:3000 2.3 express组件分析1234567891011121314151617.├── app.js├── bin│ └── www├── package.json├── public│ ├── images│ ├── javascripts│ └── stylesheets│ └── style.css├── routes│ ├── index.js│ └── users.js└── views ├── error.jade ├── index.jade └── layout.jade 组件 作用 1 app.js express服务入口 2 bin/www 端口、启动等配置 3 routes 路由 4 *controller 控制层 5 *model 数据模型 6 views 前端视图 *号为自行添加模块 2.4 express + sequelize2.4.0 install1234567$ cnpm install --save mariadb# One of the following:$ npm install --save pg pg-hstore # Postgres$ npm install --save mysql2$ npm install --save mariadb$ npm install --save sqlite3$ npm install --save tedious # Microsoft SQL Server 2.4.1 config single connection 1const sequelize = new Sequelize('mysql://user:pass@localhost:3306/db_name'); connection pool 1// fixme test 12345678sequelize .authenticate() .then(() =&gt; { console.log('Connection has been established successfully.'); }) .catch(err =&gt; { console.error('Unable to connect to the database:', err); }); 2.4.2 demo2.4.3 sequelize-auto intallation 1$ cnpm install -g sequelize-auto usage 1$ sequelize-auto -h &lt;host&gt; -d &lt;database&gt; -u &lt;user&gt; -x [password] -p [port] --dialect [dialect] -c [/path/to/config] -o [/path/to/models] -t [tableName] -C 1var model_name = sequelize.import('PATH/TO/MODEL'); 3. sails.js","link":"/2019/09/21/node-js-框架入门/"},{"title":"Go 语言入门","text":"","link":"/2019/09/27/Go-语言入门/"},{"title":"JavaScript 标准","text":"CommonJS Node.js 采用 CommonJS规范","link":"/2019/09/27/JavaScript-标准/"},{"title":"Vue.js 入门及进阶","text":"安装hello world基本组件及功能vuex","link":"/2019/09/25/Vue-js-入门及进阶/"},{"title":"Docker 入门","text":"基本概念 概念 作用 1 image 2 container 3 repository 4 docker hub docker 虚拟机 安装 mac 12$ brew install docker$ brew cask install docker container单 container 独立资源 User Mount Pid UTS Net IPC 创建 image / tag网络配置","link":"/2019/09/24/Docker-入门/"},{"title":"MongoDB 入门","text":"","link":"/2019/09/25/MongoDB-入门/"}],"tags":[{"name":"github pages hexo","slug":"github-pages-hexo","link":"/tags/github-pages-hexo/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"SpringCloud","slug":"SpringCloud","link":"/tags/SpringCloud/"},{"name":"http tcp三次握手","slug":"http-tcp三次握手","link":"/tags/http-tcp三次握手/"},{"name":"Java BIO NIO AIO","slug":"Java-BIO-NIO-AIO","link":"/tags/Java-BIO-NIO-AIO/"},{"name":"rancher","slug":"rancher","link":"/tags/rancher/"},{"name":"JVM基础","slug":"JVM基础","link":"/tags/JVM基础/"},{"name":"CommonJS AMDJS ES6","slug":"CommonJS-AMDJS-ES6","link":"/tags/CommonJS-AMDJS-ES6/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"mongodb nosql","slug":"mongodb-nosql","link":"/tags/mongodb-nosql/"}],"categories":[]}