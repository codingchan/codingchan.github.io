{"pages":[],"posts":[{"title":"github pages + hexo","text":"安装hexo1$ cnpm install hexo-cli -g 初始化博客1$ hexo init \"hexo-demo\" 新建post1$ hexo new post \"hexo-new-post\" 在hexo-demo/source/_posts下将会生成名为hexo-new-post.md的文件，可用markdown工具进行编辑。 绑定Githubgithub新建pages项目 在github中新建名为{username}.github.io的项目，其中，二级域名必须与github用户名相同，否则将导致访问404。 github中上传localhost的ssh公钥。 编辑hexo _config.yml文件1$ vi ./_config.yml 其中deploy部分修改为： 1234deploy: type: git repository: git@github.com:{username}/{username}.github.io.git branch: master 安装必要插件1$ cnpm install hexo-deployer-git --save 生成静态文件1$ hexo g 部署至Github1$ hexo d 至此，一般在三分钟左右，访问{username}.github.io，即可看到新生成的文章。","link":"/2019/09/13/github-pages-hexo/"},{"title":"SpringCloud 入门","text":"","link":"/2019/09/14/SpringCloud-入门/"},{"title":"node.js 框架入门","text":"http基础知识headstatus_codenode.js无框架搭建http服务server.js 12345678910var http = require(\"http\");var url = require(\"url\");http.createServer(function(req, res) { console.log(req.url); res.writeHead(200, {\"Content-Type\": \"text/html\"}); res.write(\"hello world\")}).listen(8080);console.log(\"server running...\"); express.jsegg.js","link":"/2019/09/21/node-js-框架入门/"},{"title":"ReactJS 入门","text":"1. 安装1$ cnpm install react react-cli 2. 初始化项目2.1 Create React App官方页面说create-react-app适用于学习react及创建简易项目： Create React App is a comfortable environment for learning React, and is the best way to start building a new single-page application in React. npx1$ npx create-react-app react-demo 运行时间相对vue.js初始化较长，完成后react-demo文件夹大小为202M。 npm1$ npm init react-app react-demo yarn1$ yarn create react-app react-demo 2.2 Next.js2.3 Gatsby3. 基本命令1234$ yarn start // 本地运行$ yarn build // 编译生成静态文件$ yarn test $ yarn eject // ? 关于yarn eject的说明： Removes this tool and copies build dependencies, configuration files and scripts into the app directory. 4. 架构(vs Vue.js) React Vue 架构 V (MVC) VM (MVVM) view JSX html + js ? 数据绑定 单向数据流 双向数据流 移动端原生应用 React Native - 5. Hello World例子 hello world极简例子的文件组成 12345.├── package.json├── src│ ├── App.js│ ├── index.js package.json 12345678910111213141516{ \"name\": \"react-demo\", \"version\": \"0.1.0\", \"private\": true, \"dependencies\": { \"react\": \"^16.9.0\", \"react-dom\": \"^16.9.0\", \"react-scripts\": \"3.1.1\" }, \"scripts\": { \"start\": \"react-scripts start\", \"build\": \"react-scripts build\", \"test\": \"react-scripts test\", \"eject\": \"react-scripts eject\" },} index.js 12345import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import App from &apos;./App&apos;;ReactDOM.render(&lt;App /&gt;, document.getElementById(&apos;root&apos;)); App.js 1234567891011import React from &apos;react&apos;;function App() { return ( &lt;div className=&quot;App&quot;&gt; Hello world! &lt;/div&gt; );}export default App; 6. 路由机制例子 文件目录 123456.├── package.json├── src│ ├── App.js│ ├── World.js│ ├── index.js index.js 同Hello World例子 App.js 12345678910111213141516import React from &apos;react&apos;;import { BrowserRouter as Router, Route } from &apos;react-router-dom&apos;;import World from &apos;./World&apos;;function App() { return ( &lt;div className=&quot;App&quot;&gt; &lt;Router&gt; &lt;Route path=&quot;/hello&quot; component={ World }&gt;&lt;/Route&gt; &lt;/Router&gt; &lt;/div&gt; );}export default App; World.js 1234567891011import React from &apos;react&apos;;function World() { return ( &lt;div&gt; Hello world! &lt;/div&gt; );}export default World; . JSX语法糖. React + TypeScript. VSCode 插件 Reactjs code snippets React native … . tips 版本问题：react-router / react-router-dom","link":"/2019/09/15/ReactJS-入门/"},{"title":"SpringCloud 入门","text":"1. 基础1.1 SpringCloud Netflix 基础组件 Name Usage 1 Netflix Eureka 服务注册/发现 2 Netflix Feign + Hystrix 客服端负载均衡 + 断路器 3 Netflix Zuul Spring Cloud Config 2 SpringCloud demo2.1 组件构成Eureka + Feign + Hystric + Zuul + Config 2.2 搭建 公共依赖 pom.xml 12345678910111213141516&lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;spring-cloud.version&gt;Greenwich.SR3&lt;/spring-cloud.version&gt;&lt;/properties&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;${spring-cloud.version}&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 2.2.1 eureka server 依赖 pom.xml 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 1234567891011121314151617server: port: 8761 #服务端口spring: application: name: eurka-server #服务应用名称eureka: instance: hostname: localhost client: registerWithEureka: false #是否将自己注册到Eureka Server，默认为true fetchRegistry: false #是否从Eureka Server获取注册信息，默认为true service-url: defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ #服务注册的 URL server: renewal-percent-threshold: 0.5 Application添加@EnableEurekaServer标注 eureka.renewalPercentThreshold=0.85导致错误：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. 解决方法：修改为0.5 或 开启多个eureka server 2.2.2 Feign + Hystrix 依赖 pom.xml 123456789101112&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 123456789101112131415server: port: 8765spring: application: name: service-feigneureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/feign: hystrix: enabled: true Application添加@@EnableEurekaClient、@EnableFeignClients 为对应的微服务接口建立interface，添加@FeignClient标注，添加fallback选项以配置Hystrix 2.2.3 Zuul 依赖 pom.xml 12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;&lt;/dependency&gt; application.yml 1234567891011121314151617server: port: 8769spring: application: name: service-zuuleureka: client: serviceUrl: defaultZone: http://localhost:8761/eureka/zuul: routes: api-feign: # 分发 path: /api/** service-id: service-feign Application添加@EnableEurekaClient、@EnableZuulProxy标注 2.2.4 Config","link":"/2019/09/17/SpringCloud-Alibaba-入门/"},{"title":"Java BIO / NIO / AIO 对比","text":"区别 BIO NIO AIO 全称 Blocking I/O New I/O Asynchronous I/O 模式 同步阻塞 同步非阻塞 异步非阻塞 支持版本 all JDK 1.4+ JDK 1.7+ Java BIO","link":"/2019/09/16/Java-NIO-Jetty-Netty-入门及对比/"}],"tags":[{"name":"github pages hexo","slug":"github-pages-hexo","link":"/tags/github-pages-hexo/"},{"name":"react","slug":"react","link":"/tags/react/"},{"name":"SpringCloud","slug":"SpringCloud","link":"/tags/SpringCloud/"},{"name":"Java BIO NIO AIO","slug":"Java-BIO-NIO-AIO","link":"/tags/Java-BIO-NIO-AIO/"}],"categories":[]}